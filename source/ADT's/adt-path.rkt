;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                Path ADT                                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (new-path index)
  (let ((points '())
        (path-start-point (new-point 0 0))
        (path-current-point (new-point 0 0))
        (path-next-point (new-point 0 0))
        (path-end-point (new-point 0 0))
        (radius 0.01)
        (random-nr (+ 1 (random (- 3 1)))))
        
    (define (add-point pos)
      (set! points (cons pos points)))

    (define (get-start-point)
      (cond ((= index 1)
             (set! path-start-point (new-point 2 level-height)))
            ((= index 2)
             (cond ((= random-nr 1)
                    (set! path-start-point (new-point -2 5.5)))
                   ((= random-nr 2)
                    (set! path-start-point (new-point -2 0.5)))))
            ((= index 3)
             (cond ((= random-nr 1)
                    (set! path-start-point (new-point -2 6.5)))
                   ((= random-nr 2)
                    (set! path-start-point (new-point -2 0.5))))))
      path-start-point)
    
    (define (get-end-point)
      (cond ((= index 1)
             (set! path-end-point (new-point 20 8)))
            ((= index 2)
             (set! path-end-point (new-point 20 7.5)))
            ((= index 3)
             (set! path-end-point (new-point 4.5 10))))
      path-end-point)

    
    (define (create-path)
      (cond ((= index 1)
             (begin
               (add-point (new-point 20 8))
               (add-point (new-point 15 8))
               (add-point (new-point 15 1))
               (add-point (new-point 15 1))
               (add-point (new-point 8 1))
               (add-point (new-point 8.5 4))
               (add-point (new-point 2 4))
               (add-point (new-point 2 4))
               (add-point (get-start-point))))
            ((and (= index 2) (= 1 random-nr))
             (begin
               (add-point (new-point 20 7.5))
               (add-point (new-point 15.5 8))
               (add-point (new-point 15.5 1.5))
               (add-point (new-point 12.5 1))
               (add-point (new-point 12.5 7.5))
               (add-point (new-point 12.5 7.5))
               (add-point (new-point 3.5 7.5))
               (add-point (new-point 3.5 5.5))
               (add-point (new-point 3.5 5.5))
               (add-point (get-start-point))))
            ((and (= index 2) (= 2 random-nr ))
             (begin
               (add-point (new-point 20 7.5))
               (add-point (new-point 15.5 8))
               (add-point (new-point 15.5 1.5))
               (add-point (new-point 12.5 1))
               (add-point (new-point 12.5 4.5))
               (add-point (new-point 9 4.5))
               (add-point (new-point 9 2.5))
               (add-point (new-point 3.5 2.5))
               (add-point (new-point 3.5 0.5))
               (add-point (new-point 3.5 0.5))
               (add-point (get-start-point))))
            ((and (= index 3) (= 1 random-nr ))
             (begin
               (add-point (new-point 4.5 10))
               (add-point (new-point 4.5 0.5))
               (add-point (new-point 16.5 0.3))
               (add-point (new-point 16.5 6.5))
               (add-point (new-point 16.5 6.5))
               (add-point (get-start-point))))
            ((and (= index 3) (= 2 random-nr))
             (begin
               (add-point (new-point 4.5 10))
               (add-point (new-point 4.5 6.5))
               (add-point (new-point 16.5 7))
               (add-point (new-point 16.5 0.5))
               (add-point (new-point 16.5 0.5))
               (add-point (get-start-point)))))
      (set! path-current-point (car points))
      (set! path-next-point (cadr points)))

    (define (next-point!)
      (when (not (null? points))
        (set! points (cdr points))
        (set! path-current-point (car points))
        (if (not (null? (cdr points)))
            (set! path-next-point (cadr points))
            (set! path-next-point #f))))

    (create-path)
  
    (define (dispatch-path msg)
      (cond ((eq? msg 'radius) radius)
            ((eq? msg 'next-point!) (next-point!))
            ((eq? msg 'next-point)  path-next-point)
            ((eq? msg 'current-point) path-current-point)
            ((eq? msg 'start-point) (get-start-point))
            ((eq? msg 'end-point) (get-end-point))
            ((eq? msg 'points) points)))
    dispatch-path))
